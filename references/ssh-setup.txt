https://blog.frankfu.com.au/2019/03/21/moving-from-windows-1809s-openssh-to-openssh-portable/

https://stackoverflow.com/questions/16212816/setting-up-openssh-for-windows-using-public-key-authentication

https://github.com/PowerShell/Win32-OpenSSH/issues/800

!!! SERVER: choco install openssh --package-parameters="/SSHAgentFeature /SSHServerFeature"

After performing the obligatory google search, I stumbled across several threads but still couldn't find a solution. This annoyed me enough to look for other alternatives and discovered a Windows port of OpenSSH Portable. So since I didn't want (probably not even possible) to have both binaries (and ssh-agents) running side by side. I decided it would be best that I remove Window's 1809's installed version first then install OpenSSH Portable
Uninstall Windows' OpenSSH

This basically removes the binaries installed in C:\Windows\System32\OpenSSH


Remove-WindowsCapability -Online -Name "OpenSSH.Client~~~~0.0.1.0"
Remove-WindowsCapability -Online -Name "OpenSSH.Server~~~~0.0.1.0"

Stop and delete the existing Windows Service

Get-Service ssh-agent | Stop-Service
sc.exe delete ssh-agent

Install OpenSSH Portable

I'm using Chocolatey's openssh package but you can download and install the binaries yourself here. This installs the binaries into C:\Program Files\OpenSSH-Win64 . The /SSHAgentFeature flag ensures that the SSH Agent Service gets installed too.

choco install openssh --package-parameters="/SSHAgentFeature"

Note version 7.9.0.1 was the last good working version for me. 8.0.0.1 was complaining about my ssh key being in an invalid format.

Check that you have the binaries installed

Get-Command ssh*exe
    
    CommandType Name              Version Source
    ----------- ----              ------- ------
    Application ssh.exe           7.9.0.0 C:\Program Files\OpenSSH-Win64\ssh.exe
    Application ssh-add.exe       7.9.0.0 C:\Program Files\OpenSSH-Win64\ssh-add.exe
    Application ssh-agent.exe     7.9.0.0 C:\Program Files\OpenSSH-Win64\ssh-agent.exe
    Application sshd.exe          7.9.0.0 C:\Program Files\OpenSSH-Win64\sshd.exe
    Application ssh-keygen.exe    7.9.0.0 C:\Program Files\OpenSSH-Win64\ssh-keygen.exe
    Application ssh-keyscan.exe   7.9.0.0 C:\Program Files\OpenSSH-Win64\ssh-keyscan.exe
    Application ssh-shellhost.exe 7.9.0.0 C:\Program Files\OpenSSH-Win64\ssh-shellhost.exe

Check that you have the ssh-agent running

Get-Service ssh-agent

Status   Name               DisplayName
------   ----               -----------
Running  ssh-agent          ssh-agent

Configure our git client to use our newly installed binaries for ssh

git config --global core.sshCommand "'C:\Program Files\OpenSSH-Win64\ssh.exe'"

Ensure that it has been configured properly

Get-Content $env:USERPROFILE\.gitconfig | Select-String sshCommand -Context 6

[core]
        excludesfile = ~/.gitignore_global
        sshCommand = 'C:\\Program Files\\OpenSSH-Win64\\ssh.exe'

I wanted to remove any existing identities (but this could be optional)

ssh-add -D

Add new identites

ssh-add 

Then we should be good to go ;)


~~~~~~


Following are setup steps for OpenSSH shipped with Windows 10 v.1803 (April 2018 update. See comments to this post, it might not work with 1809).

Server setup (elevated powershell):

    Install OpenSSH server: Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0.

    Start agent and sshd services: Start-Service ssh-agent; Start-Service sshd (this will generate host keys and default configuration automatically in $env:ProgramData\ssh).

    [Optional] Install OpenSSHUtils powershell module: Install-Module -Force OpenSSHUtils

Client setup (non-elevated powershell):

    Generate user key: cd $env:USERPROFILE\.ssh; ssh-keygen.exe, follow prompts, agree to the default suggested file location. This will create 2 files: id_rsa and id_rsa.pub;

    [Optional] add key to authentication agent, so you don't have to enter password each time you use it: ssh-add .\id_rsa (or whatever file was generated);

Server setup continued (non-elevated powershell):

    Log in as a user, for which public key auth to be used
    cd $env:USERPROFILE; mkdir .ssh; cd .ssh; New-Item authorized_keys;
    Paste the contents of the id_rsa.pub file from the client to the .ssh\authorized_keys file from the previous step.
    Setup permissions properly (important!!!):
        Run start . to open explorer with the current folder ($env:USERPROFILE\.ssh);
        Right click authorized_keys, go to Properties -> Security -> Advanced
        Click "Disable inheritance";
        Choose "Convert inherited permissions into explicit permissions on this object" when prompted;
        (really, really important) Remove all permissions on file except for the SYSTEM and yourself. There must be exactly two permission entries on the file. Some guides suggest running the Repair-AuthorizedKeyPermission $env:USERPROFILE\.ssh\authorized_keys - this will try to add the sshd user to the permission list and it will break the authentication, so, don't do that, or at least do not agree on adding the sshd user). Both SYSTEM and yourself should have full control over the file.

Client:

    Run ssh <serverusername>@<serverhostname>. It should work at this point.

Tried that with Windows 10 as server and both itself and a Debian Linux as a client.

EDIT: (see comment section below) Current windows build require to also comment out the following in

PS C:\ProgramData\ssh> bash -c 'vim sshd_config'

# Match Group administrators                                                    
#       AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys  



~~~~~~



Try adding this in sshd_config...

Match User *
ForceCommand C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe

Please change the path of the powershell based on your system configuration.